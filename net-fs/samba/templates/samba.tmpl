# Distributed under the terms of the GNU General Public License v2

EAPI=7

PYTHON_COMPAT=( python3+ )
PYTHON_REQ_USE="threads(+),xml(+)"
inherit python-single-r1 waf-utils linux-info pam

DESCRIPTION="{{desc}}"
HOMEPAGE="{{homepage}}"
SRC_URI="{{src_uri}}"
LICENSE="{{license}}"

MY_PV="${PV/_rc/rc}"
MY_P="${PN}-${MY_PV}"

KEYWORDS="*"
SLOT="0/2.10.0"

IUSE="acl addc addns ads ceph client cluster cups debug dmapi fam glusterfs
gpg iprint json ldap ntvfs pam profiling-data python quota +regedit
snapper spotlight syslog system-heimdal +system-mitkrb5 test winbind
zeroconf"

COMMON_DEPEND="
	>=app-arch/libarchive-3.1.2
	dev-lang/perl:=
	spotlight? ( dev-libs/icu:= )
	dev-libs/libbsd
	dev-libs/libtasn1
	dev-libs/popt
	dev-perl/Parse-Yapp
	>=net-libs/gnutls-3.4.7
	net-libs/libnsl
	sys-libs/e2fsprogs-libs
	!sys-libs/ldb
	sys-libs/libcap
	sys-libs/liburing
	sys-libs/ncurses:0=
	sys-libs/readline:0=
	sys-libs/talloc
	sys-libs/tdb
	sys-libs/tevent
	sys-libs/zlib
	virtual/libiconv
	acl? ( virtual/acl )
	$(python_gen_cond_dep "
		dev-python/subunit[\${PYTHON_USEDEP}]
		addns? (
			dev-python/dnspython:=[\${PYTHON_USEDEP}]
			net-dns/bind-tools[gssapi]
		)
	")
	ceph? ( sys-cluster/ceph )
	cluster? ( net-libs/rpcsvc-proto )
	cups? ( net-print/cups )
	debug? ( dev-util/lttng-ust )
	dmapi? ( sys-apps/dmapi )
	fam? ( virtual/fam )
	gpg? ( app-crypt/gpgme )
	json? ( dev-libs/jansson )
	ldap? ( net-nds/openldap )
	pam? ( sys-libs/pam )
	python? (
		sys-libs/talloc[python,${PYTHON_USEDEP}]
		sys-libs/tdb[python,${PYTHON_USEDEP}]
		sys-libs/tevent[python,${PYTHON_USEDEP}]
	)
	snapper? ( sys-apps/dbus )
	system-heimdal? ( >=app-crypt/heimdal-1.5[-ssl] )
	system-mitkrb5? ( >=app-crypt/mit-krb5-1.15.1 )
	zeroconf? ( net-dns/avahi[dbus] )
"
DEPEND="${COMMON_DEPEND}
	>=dev-util/cmocka-1.1.3
	net-libs/libtirpc
	|| (
		net-libs/rpcsvc-proto
		<sys-libs/glibc-2.26[rpc(+)]
	)
	spotlight? ( dev-libs/glib )
	test? (
		!system-mitkrb5? (
			>=net-dns/resolv_wrapper-1.1.4
			>=net-libs/socket_wrapper-1.1.9
			>=sys-libs/nss_wrapper-1.1.3
			>=sys-libs/uid_wrapper-1.2.1
		)
	)"
RDEPEND="${COMMON_DEPEND}
	client? ( net-fs/cifs-utils[ads?] )
	python? ( ${PYTHON_DEPS} )
"
BDEPEND="${PYTHON_DEPS}
	app-text/docbook-xsl-stylesheets
	dev-libs/libxslt
	virtual/pkgconfig
"

REQUIRED_USE="
	addc? ( python json winbind )
	addns? ( python )
	ads? ( acl ldap winbind )
	cluster? ( ads )
	gpg? ( addc )
	ntvfs? ( addc )
	spotlight? ( json )
	test? ( python )
	!ads? ( !addc )
	?? ( system-heimdal system-mitkrb5 )
	${PYTHON_REQUIRED_USE}
"

# the test suite is messed, it uses system-installed samba
# bits instead of what was built, tests things disabled via use
# flags, and generally just fails to work in a way ebuilds could
# rely on in its current state
RESTRICT="test"

S="${WORKDIR}/${MY_P}"

PATCHES=(
	"${FILESDIR}/${PN}-4.4.0-pam.patch"
)

WAF_BINARY="${S}/buildtools/bin/waf"

SHAREDMODS=""

pkg_setup() {
	# Package fails to build with distcc
	export DISTCC_DISABLE=1

	python-single-r1_pkg_setup

	SHAREDMODS="$(usex snapper '' '!')vfs_snapper"
	if use cluster ; then
		SHAREDMODS+=",idmap_rid,idmap_tdb2,idmap_ad"
	elif use ads ; then
		SHAREDMODS+=",idmap_ad"
	fi
}

src_prepare() {
	default

	# un-bundle dnspython
	sed -i -e '/"dns.resolver":/d' "${S}"/third_party/wscript || die

	# unbundle iso8601 unless tests are enabled
	if ! use test ; then
		sed -i -e '/"iso8601":/d' "${S}"/third_party/wscript || die
	fi

	## ugly hackaround for bug #592502
	#cp /usr/include/tevent_internal.h "${S}"/lib/tevent/ || die

	sed -e 's:<gpgme\.h>:<gpgme/gpgme.h>:' \
		-i source4/dsdb/samdb/ldb_modules/password_hash.c \
		|| die
}

src_configure() {
    export PYTHONHASHSEED=1

	# when specifying libs for samba build you must append NONE to the end to
	# stop it automatically including things
	local bundled_libs="NONE"
	if ! use system-heimdal && ! use system-mitkrb5 ; then
		bundled_libs="heimbase,heimntlm,hdb,kdc,krb5,wind,gssapi,hcrypto,hx509,roken,asn1,com_err,NONE"
	fi

	local myconf=(
		--enable-fhs
		--sysconfdir="${EPREFIX}/etc"
		--localstatedir="${EPREFIX}/var"
		--with-modulesdir="${EPREFIX}/usr/$(get_libdir)/samba"
		--with-piddir="${EPREFIX}/run/${PN}"
		--bundled-libraries="${bundled_libs}"
		--builtin-libraries=NONE
		--disable-rpath
		--disable-rpath-install
		--nopyc
		--nopyo
		--without-winexe
		$(use_with acl acl-support)
		$(usex addc '' '--without-ad-dc')
		--with-ads
		$(use_enable ceph cephfs)
		$(use_with cluster cluster-support)
		$(use_enable cups)
		$(use_with dmapi)
		$(use_with fam)
		$(use_enable glusterfs)
		$(use_with gpg gpgme)
		$(use_with json)
		$(use_enable iprint)
		$(use_with pam)
		$(usex pam "--with-pammodulesdir=${EPREFIX}/$(get_libdir)/security" '')
		$(use_with quota quotas)
		$(use_with regedit)
		$(use_enable spotlight)
		$(use_with syslog)
		$(use_with winbind)
		$(usex python '' '--disable-python')
		$(use_enable zeroconf avahi)
		$(usex test '--enable-selftest' '')
		$(usex system-mitkrb5 "--with-system-mitkrb5 $(usex addc --with-experimental-mit-ad-dc '')" '')
		$(use_with debug lttng)
		$(use_with ldap)
		$(use_with profiling-data)
		--with-shared-modules=${SHAREDMODS}
		--private-libraries='!ldb'
		# bug #683148
		--jobs 1
	)

	CPPFLAGS="-I${SYSROOT}${EPREFIX}/usr/include/et ${CPPFLAGS}" \
		waf-utils_src_configure ${myconf[@]}
}

src_compile() {
	waf-utils_src_compile
}

src_install() {
    waf-utils_src_install

	# Make all .so files executable
	find "${ED}" -type f -name "*.so" -exec chmod +x {} + || die

	# install ldap schema for server (bug #491002)
	if use ldap ; then
		insinto /etc/openldap/schema
		doins examples/LDAP/samba.schema
	fi

	# create symlink for cups (bug #552310)
	if use cups ; then
		dosym ../../../bin/smbspool /usr/libexec/cups/backend/smb
	fi

	# install example config file
	insinto /etc/samba
	doins examples/smb.conf.default

	# Fix paths in example file (#603964)
	sed \
		-e '/log file =/s@/usr/local/samba/var/@/var/log/samba/@' \
		-e '/include =/s@/usr/local/samba/lib/@/etc/samba/@' \
		-e '/path =/s@/usr/local/samba/lib/@/var/lib/samba/@' \
		-e '/path =/s@/usr/local/samba/@/var/lib/samba/@' \
		-e '/path =/s@/usr/spool/samba@/var/spool/samba@' \
		-i "${ED}"/etc/samba/smb.conf.default || die

	# Install init script and conf.d file
	newinitd "${FILESDIR}/samba4.initd-r1" samba
	newconfd "${FILESDIR}/samba4.confd" samba

	if use pam && use winbind ; then
		newpamd "${FILESDIR}/system-auth-winbind.pam" system-auth-winbind
		# bugs #376853 and #590374
		insinto /etc/security
		doins examples/pam_winbind/pam_winbind.conf
	fi

	keepdir /var/cache/samba
	keepdir /var/lib/ctdb
	keepdir /var/lib/samba/{bind-dns,private}
	keepdir /var/lock/samba
	keepdir /var/log/samba
}

src_test() {
	"${WAF_BINARY}" test || die "test failed"
}

pkg_postinst() {
	elog "Be aware that this release contains the best of all of Samba's"
	elog "technology parts, both a file server (that you can reasonably expect"
	elog "to upgrade existing Samba 3.x releases to) and the AD domain"
	elog "controller work previously known as 'samba4'."

	elog "For further information and migration steps make sure to read "
	elog "https://samba.org/samba/history/${P}.html "
	elog "https://wiki.samba.org/index.php/Samba4/HOWTO "
}
