https://bugs.gentoo.org/813957

--- a/src/3rdparty/chromium/base/task/thread_pool.cc
+++ b/src/3rdparty/chromium/base/task/thread_pool.cc
@@ -15,10 +15,10 @@
 
 namespace {
 
-class PostTaskAndReplyWithTraitsTaskRunner
+class PostTaskAndReplyWithTraitsTaskRunnerTP
     : public internal::PostTaskAndReplyImpl {
  public:
-  explicit PostTaskAndReplyWithTraitsTaskRunner(const TaskTraits& traits)
+  explicit PostTaskAndReplyWithTraitsTaskRunnerTP(const TaskTraits& traits)
       : traits_(traits) {}
 
  private:
@@ -85,7 +85,7 @@
                                   const TaskTraits& traits,
                                   OnceClosure task,
                                   OnceClosure reply) {
-  return PostTaskAndReplyWithTraitsTaskRunner(traits).PostTaskAndReply(
+  return PostTaskAndReplyWithTraitsTaskRunnerTP(traits).PostTaskAndReply(
       from_here, std::move(task), std::move(reply));
 }
 
--- a/src/3rdparty/chromium/third_party/blink/renderer/core/animation/document_animations.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/core/animation/document_animations.cc
@@ -57,8 +57,8 @@
   document.GetWorkletAnimationController().UpdateAnimationTimings(reason);
 }
 
-bool CompareAnimations(const Member<Animation>& left,
-                       const Member<Animation>& right) {
+bool CompareAnimationsDocument(const Member<Animation>& left,
+                               const Member<Animation>& right) {
   return Animation::HasLowerCompositeOrdering(
       left.Get(), right.Get(),
       Animation::CompareAnimationsOrdering::kTreeOrder);
@@ -157,7 +157,7 @@
   else
     GetAnimationsTargetingTreeScope(animations, tree_scope);
 
-  std::sort(animations.begin(), animations.end(), CompareAnimations);
+  std::sort(animations.begin(), animations.end(), CompareAnimationsDocument);
   return animations;
 }
 
@@ -203,7 +203,7 @@
 
     // By processing in decreasing order by priority, we can perform a single
     // pass for discovery of replaced properties.
-    std::sort(animations->begin(), animations->end(), CompareAnimations);
+    std::sort(animations->begin(), animations->end(), CompareAnimationsDocument);
     PropertyHandleSet replaced_properties;
     for (auto anim_it = animations->rbegin(); anim_it != animations->rend();
          anim_it++) {
--- a/src/3rdparty/chromium/third_party/blink/renderer/core/html/forms/date_time_chooser_impl.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/core/html/forms/date_time_chooser_impl.cc
@@ -129,11 +129,11 @@
       data);
 
   data->Append(ChooserResourceLoader::GetPickerCommonStyleSheet());
-  if (!features::IsFormControlsRefreshEnabled())
+  if (!::features::IsFormControlsRefreshEnabled())
     data->Append(ChooserResourceLoader::GetPickerButtonStyleSheet());
   data->Append(ChooserResourceLoader::GetSuggestionPickerStyleSheet());
   data->Append(ChooserResourceLoader::GetCalendarPickerStyleSheet());
-  if (features::IsFormControlsRefreshEnabled()) {
+  if (::features::IsFormControlsRefreshEnabled()) {
     data->Append(ChooserResourceLoader::GetCalendarPickerRefreshStyleSheet());
     if (parameters_->type == input_type_names::kTime ||
         parameters_->type == input_type_names::kDatetimeLocal) {
@@ -183,9 +183,9 @@
   AddProperty("isLocaleRTL", locale_->IsRTL(), data);
   AddProperty("isRTL", parameters_->is_anchor_element_rtl, data);
   AddProperty("isFormControlsRefreshEnabled",
-              features::IsFormControlsRefreshEnabled(), data);
+              ::features::IsFormControlsRefreshEnabled(), data);
 #if defined(OS_MAC)
-  AddProperty("isBorderTransparent", features::IsFormControlsRefreshEnabled(),
+  AddProperty("isBorderTransparent", ::features::IsFormControlsRefreshEnabled(),
               data);
 #endif
   AddProperty("mode", parameters_->type.GetString(), data);
@@ -236,7 +236,7 @@
 
   data->Append(ChooserResourceLoader::GetPickerCommonJS());
   data->Append(ChooserResourceLoader::GetSuggestionPickerJS());
-  if (features::IsFormControlsRefreshEnabled()) {
+  if (::features::IsFormControlsRefreshEnabled()) {
     data->Append(ChooserResourceLoader::GetMonthPickerJS());
     if (parameters_->type == input_type_names::kTime) {
       data->Append(ChooserResourceLoader::GetTimePickerJS());
--- a/src/3rdparty/chromium/third_party/blink/renderer/core/html/forms/multiple_fields_temporal_input_type_view.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/core/html/forms/multiple_fields_temporal_input_type_view.cc
@@ -296,7 +296,7 @@
   if (input_type_->FormControlType() == input_type_names::kTime) {
     if (date.ParseTime(value, 0, end) && end == value.length())
       edit->SetOnlyTime(date);
-  } else if (features::IsFormControlsRefreshEnabled() &&
+  } else if (::features::IsFormControlsRefreshEnabled() &&
              input_type_->FormControlType() ==
                  input_type_names::kDatetimeLocal) {
     if (date.ParseDateTimeLocal(value, 0, end) && end == value.length())
@@ -397,7 +397,7 @@
       MakeGarbageCollected<DateTimeEditElement, Document&,
                            DateTimeEditElement::EditControlOwner&>(document,
                                                                    *this));
-  if (!features::IsFormControlsRefreshEnabled()) {
+  if (!::features::IsFormControlsRefreshEnabled()) {
     GetElement().UpdateView();
     container->AppendChild(
         MakeGarbageCollected<ClearButtonElement, Document&,
@@ -498,7 +498,7 @@
   if (picker_indicator_is_visible_ &&
       ((event.key() == "ArrowDown" && event.getModifierState("Alt")) ||
        (event.key() == "F4") ||
-       (features::IsFormControlsRefreshEnabled() && event.key() == " "))) {
+       (::features::IsFormControlsRefreshEnabled() && event.key() == " "))) {
     if (PickerIndicatorElement* element = GetPickerIndicatorElement())
       element->OpenPopup();
     event.SetDefaultHandled();
--- a/src/3rdparty/chromium/third_party/blink/renderer/core/html/forms/picker_indicator_element.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/core/html/forms/picker_indicator_element.cc
@@ -60,7 +60,7 @@
 LayoutObject* PickerIndicatorElement::CreateLayoutObject(
     const ComputedStyle& style,
     LegacyLayout legacy) {
-  if (features::IsFormControlsRefreshEnabled())
+  if (::features::IsFormControlsRefreshEnabled())
     return HTMLDivElement::CreateLayoutObject(style, legacy);
 
   UseCounter::Count(GetDocument(), WebFeature::kLegacyLayoutByDetailsMarker);
--- a/src/3rdparty/chromium/third_party/blink/renderer/core/html/forms/slider_thumb_element.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/core/html/forms/slider_thumb_element.cc
@@ -63,7 +63,7 @@
   if (GetLayoutObject()) {
     GetLayoutObject()->SetNeedsLayoutAndFullPaintInvalidation(
         layout_invalidation_reason::kSliderValueChanged);
-    if (features::IsFormControlsRefreshEnabled()) {
+    if (::features::IsFormControlsRefreshEnabled()) {
       HTMLInputElement* input(HostInput());
       if (input && input->GetLayoutObject()) {
         // the slider track selected value needs to be updated.
--- a/src/3rdparty/chromium/third_party/blink/renderer/core/layout/svg/svg_layout_tree_as_text.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/core/layout/svg/svg_layout_tree_as_text.cc
@@ -252,9 +252,9 @@
   ts << " [id=\"" << resource.Target()->GetIdAttribute() << "\"]";
 }
 
-static base::Optional<Color> ResolveColor(const ComputedStyle& style,
-                                          const SVGPaint& paint,
-                                          const SVGPaint& visited_paint) {
+static base::Optional<Color> ResolveColorSVG(const ComputedStyle& style,
+                                             const SVGPaint& paint,
+                                             const SVGPaint& visited_paint) {
   if (!paint.HasColor())
     return base::nullopt;
   Color color = style.ResolvedColor(paint.GetColor());
@@ -283,7 +283,7 @@
       return true;
     }
   }
-  if (base::Optional<Color> color = ResolveColor(style, paint, visited_paint)) {
+  if (base::Optional<Color> color = ResolveColorSVG(style, paint, visited_paint)) {
     ts << " [" << paint_name << "={" << s;
     ts << "[type=SOLID] [color=" << *color << "]";
     return true;
--- a/src/3rdparty/chromium/third_party/blink/renderer/platform/webrtc/peer_connection_remote_audio_source.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/platform/webrtc/peer_connection_remote_audio_source.cc
@@ -20,7 +20,7 @@
 void* const kPeerConnectionRemoteTrackIdentifier =
     const_cast<void**>(&kPeerConnectionRemoteTrackIdentifier);
 
-void SendLogMessage(const std::string& message) {
+void SendLogMessageRTC(const std::string& message) {
   blink::WebRtcLogMessage("PCRAS::" + message);
 }
 
@@ -82,12 +82,12 @@
       track_interface_(std::move(track_interface)),
       is_sink_of_peer_connection_(false) {
   DCHECK(track_interface_);
-  SendLogMessage(base::StringPrintf("PeerConnectionRemoteAudioSource([id=%s])",
+  SendLogMessageRTC(base::StringPrintf("PeerConnectionRemoteAudioSource([id=%s])",
                                     track_interface_->id().c_str()));
 }
 
 PeerConnectionRemoteAudioSource::~PeerConnectionRemoteAudioSource() {
-  SendLogMessage(base::StringPrintf("~PeerConnectionRemoteAudioSource([id=%s])",
+  SendLogMessageRTC(base::StringPrintf("~PeerConnectionRemoteAudioSource([id=%s])",
                                     track_interface_->id().c_str()));
   EnsureSourceIsStopped();
 }
@@ -103,7 +103,7 @@
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
   if (is_sink_of_peer_connection_)
     return true;
-  SendLogMessage(base::StringPrintf("EnsureSourceIsStarted([id=%s])",
+  SendLogMessageRTC(base::StringPrintf("EnsureSourceIsStarted([id=%s])",
                                     track_interface_->id().c_str()));
   track_interface_->AddSink(this);
   is_sink_of_peer_connection_ = true;
@@ -113,7 +113,7 @@
 void PeerConnectionRemoteAudioSource::EnsureSourceIsStopped() {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
   if (is_sink_of_peer_connection_) {
-    SendLogMessage(base::StringPrintf("EnsureSourceIsStopped([id=%s])",
+    SendLogMessageRTC(base::StringPrintf("EnsureSourceIsStopped([id=%s])",
                                       track_interface_->id().c_str()));
     track_interface_->RemoveSink(this);
     is_sink_of_peer_connection_ = false;
